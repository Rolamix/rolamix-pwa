/**
 * This is an autogenerated file created by the Stencil build process.
 * It contains typing information for all components that exist in this project
 * and imports for stencil collections that might be configured in your stencil.config.js file
 */

import '@stencil/core';

declare global {
  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {}
  }
  namespace JSXElements {}

  interface HTMLElement {
    componentOnReady?: () => Promise<this | null>;
  }

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;

    forceUpdate(): void;
  }

  interface HTMLAttributes {}
}

import '@engineerapart/stencil-lift';
import 'ionicons';
import '@ionic/core';
import '@theracode/router';

import {
  MatchResults,
} from '@theracode/router';

declare global {

  namespace StencilComponents {
    interface AppHome {

    }
  }

  interface HTMLAppHomeElement extends StencilComponents.AppHome, HTMLStencilElement {}

  var HTMLAppHomeElement: {
    prototype: HTMLAppHomeElement;
    new (): HTMLAppHomeElement;
  };
  interface HTMLElementTagNameMap {
    'app-home': HTMLAppHomeElement;
  }
  interface ElementTagNameMap {
    'app-home': HTMLAppHomeElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'app-home': JSXElements.AppHomeAttributes;
    }
  }
  namespace JSXElements {
    export interface AppHomeAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface AppInit {

    }
  }

  interface HTMLAppInitElement extends StencilComponents.AppInit, HTMLStencilElement {}

  var HTMLAppInitElement: {
    prototype: HTMLAppInitElement;
    new (): HTMLAppInitElement;
  };
  interface HTMLElementTagNameMap {
    'app-init': HTMLAppInitElement;
  }
  interface ElementTagNameMap {
    'app-init': HTMLAppInitElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'app-init': JSXElements.AppInitAttributes;
    }
  }
  namespace JSXElements {
    export interface AppInitAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface AppSplash {
      'active': boolean;
    }
  }

  interface HTMLAppSplashElement extends StencilComponents.AppSplash, HTMLStencilElement {}

  var HTMLAppSplashElement: {
    prototype: HTMLAppSplashElement;
    new (): HTMLAppSplashElement;
  };
  interface HTMLElementTagNameMap {
    'app-splash': HTMLAppSplashElement;
  }
  interface ElementTagNameMap {
    'app-splash': HTMLAppSplashElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'app-splash': JSXElements.AppSplashAttributes;
    }
  }
  namespace JSXElements {
    export interface AppSplashAttributes extends HTMLAttributes {
      'active'?: boolean;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface AppProfile {
      'match': MatchResults;
      'name': string;
    }
  }

  interface HTMLAppProfileElement extends StencilComponents.AppProfile, HTMLStencilElement {}

  var HTMLAppProfileElement: {
    prototype: HTMLAppProfileElement;
    new (): HTMLAppProfileElement;
  };
  interface HTMLElementTagNameMap {
    'app-profile': HTMLAppProfileElement;
  }
  interface ElementTagNameMap {
    'app-profile': HTMLAppProfileElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'app-profile': JSXElements.AppProfileAttributes;
    }
  }
  namespace JSXElements {
    export interface AppProfileAttributes extends HTMLAttributes {
      'match'?: MatchResults;
      'name'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface AppLogo {

    }
  }

  interface HTMLAppLogoElement extends StencilComponents.AppLogo, HTMLStencilElement {}

  var HTMLAppLogoElement: {
    prototype: HTMLAppLogoElement;
    new (): HTMLAppLogoElement;
  };
  interface HTMLElementTagNameMap {
    'app-logo': HTMLAppLogoElement;
  }
  interface ElementTagNameMap {
    'app-logo': HTMLAppLogoElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'app-logo': JSXElements.AppLogoAttributes;
    }
  }
  namespace JSXElements {
    export interface AppLogoAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface RmxButton {
      'center': boolean;
      'disabled': boolean;
      'full': boolean;
      'loading': boolean;
      'raiseClick': (evt: UIEvent) => void;
      'swap': boolean;
    }
  }

  interface HTMLRmxButtonElement extends StencilComponents.RmxButton, HTMLStencilElement {}

  var HTMLRmxButtonElement: {
    prototype: HTMLRmxButtonElement;
    new (): HTMLRmxButtonElement;
  };
  interface HTMLElementTagNameMap {
    'rmx-button': HTMLRmxButtonElement;
  }
  interface ElementTagNameMap {
    'rmx-button': HTMLRmxButtonElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'rmx-button': JSXElements.RmxButtonAttributes;
    }
  }
  namespace JSXElements {
    export interface RmxButtonAttributes extends HTMLAttributes {
      'center'?: boolean;
      'disabled'?: boolean;
      'full'?: boolean;
      'loading'?: boolean;
      'raiseClick'?: (evt: UIEvent) => void;
      'swap'?: boolean;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface RmxInput {
      'disabled': boolean;
      'fieldType': 'text' | 'password';
      'hasError': boolean;
      'icon': string | JSX.Element;
      'inputClass': string;
      'label': string;
      'message': string;
      'name': string;
      'onBlurChange': () => void;
      'onFocusChange': () => void;
      'onInputChange': (evt: KeyboardEvent, value: string) => void;
      'onValueChange': (evt: KeyboardEvent, value: string) => void;
      'placeholder': string;
      'value': string;
    }
  }

  interface HTMLRmxInputElement extends StencilComponents.RmxInput, HTMLStencilElement {}

  var HTMLRmxInputElement: {
    prototype: HTMLRmxInputElement;
    new (): HTMLRmxInputElement;
  };
  interface HTMLElementTagNameMap {
    'rmx-input': HTMLRmxInputElement;
  }
  interface ElementTagNameMap {
    'rmx-input': HTMLRmxInputElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'rmx-input': JSXElements.RmxInputAttributes;
    }
  }
  namespace JSXElements {
    export interface RmxInputAttributes extends HTMLAttributes {
      'disabled'?: boolean;
      'fieldType'?: 'text' | 'password';
      'hasError'?: boolean;
      'icon'?: string | JSX.Element;
      'inputClass'?: string;
      'label'?: string;
      'message'?: string;
      'name'?: string;
      'onBlurChange'?: () => void;
      'onFocusChange'?: () => void;
      'onInputChange'?: (evt: KeyboardEvent, value: string) => void;
      'onValueChange'?: (evt: KeyboardEvent, value: string) => void;
      'placeholder'?: string;
      'value'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface RmxSpinner {
      'active': boolean;
      'backgroundColor': 'white' | 'primarySoft';
      'size': 'small' | 'medium' | 'large';
    }
  }

  interface HTMLRmxSpinnerElement extends StencilComponents.RmxSpinner, HTMLStencilElement {}

  var HTMLRmxSpinnerElement: {
    prototype: HTMLRmxSpinnerElement;
    new (): HTMLRmxSpinnerElement;
  };
  interface HTMLElementTagNameMap {
    'rmx-spinner': HTMLRmxSpinnerElement;
  }
  interface ElementTagNameMap {
    'rmx-spinner': HTMLRmxSpinnerElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'rmx-spinner': JSXElements.RmxSpinnerAttributes;
    }
  }
  namespace JSXElements {
    export interface RmxSpinnerAttributes extends HTMLAttributes {
      'active'?: boolean;
      'backgroundColor'?: 'white' | 'primarySoft';
      'size'?: 'small' | 'medium' | 'large';
    }
  }
}


declare global {

  namespace StencilComponents {
    interface SvgIcon {
      /**
       * Specifies the label to use for accessibility. Defaults to the icon name.
       */
      'ariaLabel': string;
      'color': string;
      /**
       * A combination of both `name` and `src`. If a `src` url is detected it will set the `src` property. Otherwise it assumes it's a built-in named SVG and set the `name` property.
       */
      'icon': string;
      /**
       * Specifies which icon to use from the built-in set of icons.
       */
      'name': string;
      /**
       * The size of the icon. Available options are: `"small"`, `"medium"` and `"large"`.
       */
      'size': string;
      /**
       * Specifies the exact `src` of an SVG file to use.
       */
      'src': string;
    }
  }

  interface HTMLSvgIconElement extends StencilComponents.SvgIcon, HTMLStencilElement {}

  var HTMLSvgIconElement: {
    prototype: HTMLSvgIconElement;
    new (): HTMLSvgIconElement;
  };
  interface HTMLElementTagNameMap {
    'svg-icon': HTMLSvgIconElement;
  }
  interface ElementTagNameMap {
    'svg-icon': HTMLSvgIconElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'svg-icon': JSXElements.SvgIconAttributes;
    }
  }
  namespace JSXElements {
    export interface SvgIconAttributes extends HTMLAttributes {
      /**
       * Specifies the label to use for accessibility. Defaults to the icon name.
       */
      'ariaLabel'?: string;
      'color'?: string;
      /**
       * A combination of both `name` and `src`. If a `src` url is detected it will set the `src` property. Otherwise it assumes it's a built-in named SVG and set the `name` property.
       */
      'icon'?: string;
      /**
       * Specifies which icon to use from the built-in set of icons.
       */
      'name'?: string;
      /**
       * The size of the icon. Available options are: `"small"`, `"medium"` and `"large"`.
       */
      'size'?: string;
      /**
       * Specifies the exact `src` of an SVG file to use.
       */
      'src'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface SiteHeader {
      'isLoggedIn': boolean;
      'isOpen': boolean;
    }
  }

  interface HTMLSiteHeaderElement extends StencilComponents.SiteHeader, HTMLStencilElement {}

  var HTMLSiteHeaderElement: {
    prototype: HTMLSiteHeaderElement;
    new (): HTMLSiteHeaderElement;
  };
  interface HTMLElementTagNameMap {
    'site-header': HTMLSiteHeaderElement;
  }
  interface ElementTagNameMap {
    'site-header': HTMLSiteHeaderElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'site-header': JSXElements.SiteHeaderAttributes;
    }
  }
  namespace JSXElements {
    export interface SiteHeaderAttributes extends HTMLAttributes {
      'isLoggedIn'?: boolean;
      'isOpen'?: boolean;
      'onMenuToggle'?: (event: CustomEvent) => void;
    }
  }
}

declare global { namespace JSX { interface StencilJSX {} } }
